{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/alberto/data/presentations/ChainlinkHackathon/moonlink-oracles/components/DataFeed.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Button } from 'semantic-ui-react';\nimport ConsumerInstance from '../ethereum/feed';\n\nconst addresses = require('../ethereum/addresses');\n\nclass Table extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      btcusd: 'N/A',\n      updated: 'N/A'\n    });\n\n    _defineProperty(this, \"onUpdate\", async () => {\n      // Date\n      const currentdate = new Date(); // BTC\n\n      const btcPrice = getPrice(addresses.btcusd); // BTC\n\n      const ethPrice = getPrice(addresses.ethusd);\n      this.setState(() => {\n        return {\n          btcusd: btcPrice.toFixed(2),\n          ethusd: ethPrice.toFixed(2),\n          updated: `${currentdate.getFullYear()}/${currentdate.getMonth()}/${currentdate.getDate()} ${currentdate.getHours()}:${currentdate.getMinutes()}:${currentdate.getSeconds()}`\n        };\n      });\n    });\n\n    _defineProperty(this, \"getPrice\", async address => {\n      const contractInstance = ConsumerInstance(addresses.btcusd);\n      const dec = contractInstance.decimals();\n      return (await contractInstance.getLatestPrice()) / Math.pow(10, dec);\n    });\n  }\n\n  // Nextjs uses this function to render this first server-side\n  static async getInitialProps() {\n    return {};\n  }\n\n  async componentDidMount() {\n    const currentdate = new Date();\n    const btcInst = ConsumerInstance(addresses.btcusd);\n    const decimals = await btcInst.decimals();\n    const price = (await btcInst.getLatestPrice()) / Math.pow(10, decimals);\n    this.setState(() => {\n      return {\n        btcusd: price.toFixed(2),\n        updated: `${currentdate.getFullYear()}/${currentdate.getMonth()}/${currentdate.getDate()} ${currentdate.getHours()}:${currentdate.getMinutes()}:${currentdate.getSeconds()}`\n      };\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Data Price Feed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"ui celled table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Token Pair\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 22\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Price\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 22\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  content: \"Updated Data\",\n                  icon: \"plus square\",\n                  primary: true,\n                  onClick: this.onUpdate\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 66,\n                  columnNumber: 28\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 22\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              \"data-label\": \"Token Pair\",\n              children: \"BTC/USD\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 22\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              \"data-label\": \"Price\",\n              children: this.state.btcusd\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 22\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              \"data-label\": \"Last Updated\",\n              children: this.state.updated\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 22\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 16\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 10\n    }, this);\n  }\n\n}\n\nexport default Table;","map":{"version":3,"sources":["/home/alberto/data/presentations/ChainlinkHackathon/moonlink-oracles/components/DataFeed.js"],"names":["React","Component","Button","ConsumerInstance","addresses","require","Table","btcusd","updated","currentdate","Date","btcPrice","getPrice","ethPrice","ethusd","setState","toFixed","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","address","contractInstance","dec","decimals","getLatestPrice","Math","pow","getInitialProps","componentDidMount","btcInst","price","render","onUpdate","state"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Button } from 'semantic-ui-react';\nimport ConsumerInstance from '../ethereum/feed';\nconst addresses = require('../ethereum/addresses');\n\nclass Table extends Component {\n   // Nextjs uses this function to render this first server-side\n   static async getInitialProps() {\n      return {};\n   }\n\n   state = {\n      btcusd: 'N/A',\n      updated: 'N/A',\n   };\n\n   async componentDidMount() {\n      const currentdate = new Date();\n\n      const btcInst = ConsumerInstance(addresses.btcusd);\n      const decimals = await btcInst.decimals();\n      const price = (await btcInst.getLatestPrice()) / Math.pow(10, decimals);\n\n      this.setState(() => {\n         return {\n            btcusd: price.toFixed(2),\n            updated: `${currentdate.getFullYear()}/${currentdate.getMonth()}/${currentdate.getDate()} ${currentdate.getHours()}:${currentdate.getMinutes()}:${currentdate.getSeconds()}`,\n         };\n      });\n   }\n\n   onUpdate = async () => {\n      // Date\n      const currentdate = new Date();\n      // BTC\n      const btcPrice = getPrice(addresses.btcusd);\n      // BTC\n      const ethPrice = getPrice(addresses.ethusd);\n\n      this.setState(() => {\n         return {\n            btcusd: btcPrice.toFixed(2),\n            ethusd: ethPrice.toFixed(2),\n            updated: `${currentdate.getFullYear()}/${currentdate.getMonth()}/${currentdate.getDate()} ${currentdate.getHours()}:${currentdate.getMinutes()}:${currentdate.getSeconds()}`,\n         };\n      });\n   };\n\n   getPrice = async (address) => {\n      const contractInstance = ConsumerInstance(addresses.btcusd);\n      const dec = contractInstance.decimals();\n      return (await contractInstance.getLatestPrice()) / Math.pow(10, dec);\n   };\n\n   render() {\n      return (\n         <div>\n            <h3>Data Price Feed</h3>\n            <table className='ui celled table'>\n               <thead>\n                  <tr>\n                     <th>Token Pair</th>\n                     <th>Price</th>\n                     <th>\n                        <a>\n                           <Button\n                              content='Updated Data'\n                              icon='plus square'\n                              primary\n                              onClick={this.onUpdate}\n                           />\n                        </a>\n                     </th>\n                  </tr>\n               </thead>\n               <tbody>\n                  <tr>\n                     <td data-label='Token Pair'>BTC/USD</td>\n                     <td data-label='Price'>{this.state.btcusd}</td>\n                     <td data-label='Last Updated'>{this.state.updated}</td>\n                  </tr>\n               </tbody>\n            </table>\n         </div>\n      );\n   }\n}\n\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}